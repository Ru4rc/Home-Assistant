blueprint:
  name: Theatre Mode
  description: "This blueprint lets you create an automation for your home theatre experience.\n
    It works by defining two scenes with the entities you want controlled. One for the playing state and another for the paused state.\n
    The automation stores the states of the entities from the playing scene.\n
    When the selected media player returns to a state other than paused the initial state of the entities will be restored.\n\n
    Forked from [here](https://community.home-assistant.io/t/scene-based-theatre-mode/525457)."
  domain: automation
  input:
          
    media_player:
      name: Media Player
      description: Media player that triggers the automation
      selector:
        entity:
          domain: media_player

    scene_playing:
      name: Play Scene
      description: Activated when playing
      selector:
        entity:
          domain: scene

    scene_paused:
      name: Pause Scene
      description: Activated when paused
      selector:
        entity:
          domain: scene

    reaction_time:
      name: Reaction Time
      description: Time (seconds) the player must be in a different state before the scenes get triggered
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 1
          mode: slider

    transition:
      name: Transition Time
      description: Transition time for scenes in seconds
      default: 1
      selector:
        number:
          min: 1
          max: 10
          step: 1
          mode: slider
          
    apps:
      name: Apps
      description: Scenes will only be activated, once the chosen Apps are running on the media player
      selector:
        select:
          options:
            - Plex
            - Netflix
            - Disney+
            - Prime Video
          multiple: true
          mode: list
            
variables:
  scene_uuid: 'theatre_mode_before'
  scene_playing: !input scene_playing
  scene_entities: "{{ state_attr(scene_playing,'entity_id') }}"
  media_player: !input media_player

trigger:
  - platform: state
    entity_id: !input media_player
    from: 
      - "idle"
      - "off"
      - "stopped"
      - "standby"
      - "unknown"
      - "unavailable"
      - "buffering"
    to: "playing"
    for:
      seconds: !input reaction_time
    id: create_scene
      
  - platform: state
    entity_id: !input media_player
    from: "playing"
    to: "paused"
    for:
      seconds: !input reaction_time
    id: paused
      
  - platform: state 
    entity_id: !input media_player
    to: "playing"
    from: "paused"
    for:
      seconds: !input reaction_time
    id: playing 
      
  - platform: state
    entity_id: !input media_player
    attribute: app_name
    from: !input apps
    to: "None"
    for:
      seconds: !input reaction_time
    id: stopped
    
action:
  - if:
    - condition: trigger
      id: create_scene
    - condition: state
      entity_id: !input media_player
      attribute: app_name
      state: !input apps
    then:
    - service: scene.create
      data:
        scene_id: "{{ scene_uuid }}"
        snapshot_entities: "{{ scene_entities }}"
    - delay:
        seconds: 2
    - service: scene.turn_on
      data:
        transition: !input transition
      target:
        entity_id: !input scene_playing

  - if:
    - condition: trigger
      id: playing
    - condition: state
      entity_id: !input media_player
      attribute: app_name
      state: !input apps
    then:
      - service: scene.turn_on
        data:
          transition: !input transition
        target:
          entity_id: !input scene_playing

  - if:
    - condition: trigger
      id: paused
    - condition: state
      entity_id: !input media_player
      attribute: app_name
      state: !input apps
    then:
      - service: scene.turn_on
        data:
          transition: !input transition
        target:
          entity_id: !input scene_paused

  - if:
    - condition: trigger
      id: stopped
    - condition: state
      entity_id: !input media_player
      to:
        - "idle"
        - "off"
        - "stopped"
        - "standby"
        - "unknown"
        - "unavailable"
      for: 
        seconds: !input reaction_time
    then:
      - service: scene.turn_on
        data:
          transition: !input transition
        target:
          entity_id: "scene.{{ scene_uuid }}"

mode: queued
